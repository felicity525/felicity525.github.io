<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树（Segment Tree）</title>
      <link href="/2025/10/29/2025_10_29/"/>
      <url>/2025/10/29/2025_10_29/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点理解"><a href="#知识点理解" class="headerlink" title="知识点理解"></a>知识点理解</h1><p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>想象一下，你有一条很长的街道，街道上有许多店铺，每个店铺都有一个营业额。现在，你不断地接到这样的任务：</p><ol><li>“请问，从第 L 家店到第 R 家店，总营业额是多少？”</li><li>“第 K 家店的营业额变了，请更新它。”<br>如果用传统的方法，每次查询都遍历一遍，或者每次修改都从头开始计算，那会非常慢。</li></ol><h3 id="什么是线段树"><a href="#什么是线段树" class="headerlink" title="什么是线段树"></a>什么是线段树</h3><p><strong>线段树</strong> 是一种用于维护<strong>区间信息</strong>的数据结构。它将一个区间（例如数组 <code>A[1...N]</code>）划分成一系列子区间，并用一棵二叉树来存储这些子区间的信息。每个节点代表一个区间，树的根节点代表整个大区间，叶子节点代表最小的单元区间（通常是单个元素）。</p><p>线段树的核心思想是<strong>分治（Divide and Conquer）</strong>。它把一个大问题不断地分解成更小的子问题，直到这些子问题足够简单可以直接解决。</p><ol><li><p><strong>分而治之</strong>：</p><ul><li>你的“统计局”会把整条街（一个大区间）分成两半，变成两个子区间。</li><li>然后，它再把每个子区间继续分成两半，直到每个区间只包含一个店铺。</li><li>这个不断分解的过程，就形成了一棵树。树的<strong>根节点</strong>代表整条街，<strong>叶子节点</strong>代表每一家店铺。</li><li>中间节点代表它所管辖的子区间，它存储的信息是它左右两个子节点（子区间）信息的<strong>汇总</strong>。</li></ul></li><li><p><strong>快速查询</strong>：</p><ul><li><p>当你想知道从第 L 到第 R 家店的总营业额时，“统计局”不会从头到尾数。</p></li><li><p>它会从根节点开始，利用树的结构，迅速地找到那些<strong>完整包含在你的查询区间 [L,R] 内的节点</strong>。</p></li><li><p>例如，你想查 $[3,7]$ 的营业额，它可能会发现区间 $[3,4]$ 和 $[5,7]$ 都在你的查询范围内，它只需要把这两个区间的总和加起来，而这两个总和都已经存储在树的节点里了。</p></li><li><p>这样，你就不需要访问那些不在查询区间内的节点，也不需要访问所有叶子节点，大大节省了时间。</p></li></ul></li><li><p><strong>高效修改</strong>：</p><ul><li>当一家店的营业额发生变化时，你只需要从树的<strong>叶子节点</strong>开始，找到那家店对应的节点，更新它的值。</li><li>然后，你再<strong>一路向上</strong>，更新它的父节点、父节点的父节点…直到根节点。</li><li>因为修改只影响一条从叶子到根的路径，所以更新操作也非常快。</li></ul></li></ol><h3 id="为什么这样做快？"><a href="#为什么这样做快？" class="headerlink" title="为什么这样做快？"></a>为什么这样做快？</h3><p>线段树将一个大区间问题，高效地转化为对树的查询和修改。查询和修改的时间复杂度都降为 $O(logN)$。这个“降维打击”使得它在处理大量区间操作时表现出色。</p><p>简单来说，<strong>线段树</strong>就是一种强大的数据结构，它通过<strong>分治思想</strong>和<strong>树形结构</strong>，将对一维数组的区间操作，转化成对树的对数级复杂度的操作。</p><h4 id="树的构建"><a href="#树的构建" class="headerlink" title="树的构建"></a>树的构建</h4><p>线段树的构建是一个递归过程：</p><ul><li><p><strong>根节点</strong>：代表整个数组区间$[1,N]$。</p></li><li><p><strong>中间节点</strong>：代表区间 $[L,R]$，它的左子节点代表区间 $[L,\frac{L+R}{2}]$，右子节点代表区间 $[\frac{L+R}{2}+1,R]$。(不断将区间对半分)</p></li><li><p><strong>叶子节点</strong>：代表单一元素区间 $[i,i]$。</p></li><li><p>每个节点存储其所代表区间的一些汇总信息，例如区间和、最大值、最小值等，这取决于具体应用。</p></li></ul><h4 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h4><ol><li><p><strong>构建 (Build)</strong>：</p><ul><li><p>递归地构建树，从根节点开始，直到叶子节点。</p></li><li><p>叶子节点的值直接从原始数组中获取。</p></li><li><p>中间节点的值由其子节点的值通过合并操作（例如求和、取最大值等）得到。</p></li><li><p>时间复杂度：O(N)。</p></li></ul></li><li><p><strong>单点修改 (Update)</strong>：</p><ul><li><p>从根节点开始，通过递归找到要修改的叶子节点。</p></li><li><p>更新叶子节点的值。</p></li><li><p>递归地返回，并更新沿途经过的所有父节点的值。</p></li><li><p>时间复杂度：O(logN)。</p></li></ul></li><li><p><strong>区间查询 (Query)</strong>：</p><ul><li><p>递归地从根节点开始，查询目标区间 $[Q_L,Q_R]$。</p></li><li><p><strong>三种情况</strong>：</p><ul><li><p>当前节点区间与查询区间<strong>完全重合</strong>：直接返回当前节点存储的值。</p></li><li><p>当前节点区间与查询区间<strong>部分重叠</strong>：递归地向左右子节点查询，并将结果合并。</p></li><li><p>当前节点区间与查询区间<strong>不重叠</strong>：返回一个<strong>空值</strong>（例如，查询和时返回 0，查询最大值时返回 −infty）。</p></li></ul></li><li><p>时间复杂度：O(logN)。</p></li></ul></li></ol><h4 id="示例代码（C-实现）"><a href="#示例代码（C-实现）" class="headerlink" title="示例代码（C++ 实现）"></a>示例代码（C++ 实现）</h4><p>以下是一个维护区间和的线段树的伪代码框架：<br>* 满二叉树中根节点和子节点的标号的关系<code>n</code>与<code>n*2</code>，<code>n*2+1</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> arr[MAXN];    <span class="comment">// 原始数组</span></span><br><span class="line"><span class="type">int</span> tree[MAXN * <span class="number">4</span>]; <span class="comment">// 线段树数组，通常大小为4倍N</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并操作，这里是求和</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">    tree[node] = tree[node * <span class="number">2</span>] + tree[node * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 构建线段树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">        tree[node] = arr[start];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span>, start, mid);</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="built_in">push_up</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 单点修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> idx, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">        arr[idx] = val;</span><br><span class="line">        tree[node] = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (start &lt;= idx &amp;&amp; idx &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(node * <span class="number">2</span>, start, mid, idx, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update</span>(node * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, end, idx, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 区间查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; start || end &lt; l) &#123; <span class="comment">// 不重叠</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回空值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) &#123; <span class="comment">// 完全重合</span></span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> p1 = <span class="built_in">query</span>(node * <span class="number">2</span>, start, mid, l, r);</span><br><span class="line">    <span class="type">int</span> p2 = <span class="built_in">query</span>(node * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, end, l, r);</span><br><span class="line">    <span class="keyword">return</span> p1 + p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 数组大小</span></span><br><span class="line">    <span class="comment">// build(1, 1, n);</span></span><br><span class="line">    <span class="comment">// update(1, 1, n, idx, val);</span></span><br><span class="line">    <span class="comment">// int sum = query(1, 1, n, l, r);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="懒惰标记"><a href="#懒惰标记" class="headerlink" title="懒惰标记"></a>懒惰标记</h3><p>如果要求修改区间$[l,r]$，把所有包含在区间$[l,r]$ 中的节点都遍历一次、修改一次，时间复杂度无法承受。我们这里需要引入一个叫做 懒惰标记 的东西。</p><h3 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h3><p>To be continued…</p><h3 id="代码上的简化书写"><a href="#代码上的简化书写" class="headerlink" title="代码上的简化书写"></a>代码上的简化书写</h3><ul><li><code>n &lt;&lt; 1</code>即<code>n * 2</code></li><li><code>n &lt;&lt; 1 | 1</code>即<code>n * 2 + 1</code></li><li>用结构体来存储信息</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span>&#123;</span><br><span class="line">    ll sum,add,mul;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;tree[MAXN*<span class="number">4</span>];</span><br></pre></td></tr></table></figure><hr><h2 id="洛谷P3372（模板"><a href="#洛谷P3372（模板" class="headerlink" title="洛谷P3372（模板"></a>洛谷P3372（模板</h2><p><strong>区间更新&amp;区间查询</strong>&#x3D;&gt;运用懒惰标记</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line">ll n,m,a[MAXN],tree[MAXN*<span class="number">4</span>],lazy[MAXN*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node] = tree[node*<span class="number">2</span>]+tree[node*<span class="number">2</span><span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll node,ll start,ll end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lazy[node] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(start==end)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node] = a[start];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span>, start, mid);</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="built_in">push_up</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">laz</span><span class="params">(ll node,ll start,ll end,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lazy[node] +=k;</span><br><span class="line">    tree[node] += k*(end-start<span class="number">+1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(ll node,ll start,ll end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid = (start+end)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">laz</span>(node*<span class="number">2</span>,start,mid,lazy[node]);</span><br><span class="line">    <span class="built_in">laz</span>(node*<span class="number">2</span><span class="number">+1</span>,mid<span class="number">+1</span>,end,lazy[node]);</span><br><span class="line">    lazy[node] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(ll x,ll y,ll start,ll end,ll node,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; start || end &lt; x) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= start &amp;&amp; end &lt;= y) &#123;</span><br><span class="line">        tree[node] += (end - start + <span class="number">1</span>) * k;</span><br><span class="line">        lazy[node] += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">push_down</span>(node, start, end); <span class="comment">// 先下传标记</span></span><br><span class="line">    ll mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">update</span>(x, y,start, mid,node * <span class="number">2</span>,k);</span><br><span class="line">    <span class="built_in">update</span>(x,y,mid + <span class="number">1</span>, end,node * <span class="number">2</span> + <span class="number">1</span>,k);</span><br><span class="line">    <span class="built_in">push_up</span>(node); <span class="comment">// 重新合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,ll y,ll start,ll end,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; start || end &lt; x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= start &amp;&amp; end &lt;= y) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">push_down</span>(node, start, end); <span class="comment">// 先下传标记</span></span><br><span class="line">    ll mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    ll p1 = <span class="built_in">query</span>(x,y,start, mid,node * <span class="number">2</span>);</span><br><span class="line">    ll p2 = <span class="built_in">query</span>(x,y,mid + <span class="number">1</span>, end,node * <span class="number">2</span><span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">return</span> p1 + p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        cin&gt;&gt;ch;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll x,y,k;</span><br><span class="line">            cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class="line">            <span class="built_in">update</span>(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll x,y;</span><br><span class="line">            cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(x,y,<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="洛谷P3373（模板"><a href="#洛谷P3373（模板" class="headerlink" title="洛谷P3373（模板"></a>洛谷P3373（模板</h2><p><strong>区间加法&amp;区间乘法&amp;区间查询</strong>&#x3D;&gt;打两个标记<br><strong>区间加法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s[pos].add = (s[pos].add + k) % mod;</span><br><span class="line">s[pos].sum = (s[pos].sum + k * (s[pos].r - s[pos].l + <span class="number">1</span>)) % mod;</span><br></pre></td></tr></table></figure><p><strong>区间乘法</strong><br>需要同时更新mul和add<br>add最终会加到sum中，<code>(sum + add) * k == sum * k + add * k</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[pos].add = (s[pos].add * k) % mod;</span><br><span class="line">s[pos].mul = (s[pos].mul * k) % mod;</span><br><span class="line">s[pos].sum = (s[pos].sum * k) % mod;</span><br></pre></td></tr></table></figure><p><strong>pushdown维护</strong><br><code>sum</code>因为add之前已经更新过，所以子节点乘过mul后直接加<br><code>mul</code>直接乘<br><code>add</code>因为add要包括乘后的值，子节点要先乘mul</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[pos &lt;&lt; <span class="number">1</span>].sum = (s[pos &lt;&lt; <span class="number">1</span>].sum * s[pos].mul + s[pos].add * (s[pos &lt;&lt; <span class="number">1</span>].r - s[pos &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>)) % mod; </span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span>].mul = (s[pos &lt;&lt; <span class="number">1</span>].mul * s[pos].mul) % mod; </span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span>].add = (s[pos &lt;&lt; <span class="number">1</span>].add * s[pos].mul + s[pos].add) % mod;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,mod;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TREE</span>&#123;</span><br><span class="line">    ll sum,add,mul;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;s[MAXN*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> pos)</span><span class="comment">//更新sum</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[pos].sum = (s[pos&lt;&lt;<span class="number">1</span>].sum+s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum)%mod;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> pos)</span><span class="comment">//下传懒惰标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>].sum = (s[pos&lt;&lt;<span class="number">1</span>].sum * s[pos].mul + s[pos].add * (s[pos&lt;&lt;<span class="number">1</span>].r-s[pos&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>))%mod;</span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = (s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum * s[pos].mul+s[pos].add*(s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l<span class="number">+1</span>))%mod;</span><br><span class="line">    </span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>].mul = (s[pos&lt;&lt;<span class="number">1</span>].mul*s[pos].mul)%mod;</span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul = (s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul*s[pos].mul)%mod;</span><br><span class="line">    </span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>].add=(s[pos&lt;&lt;<span class="number">1</span>].add*s[pos].mul+s[pos].add)%mod;</span><br><span class="line">    s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add=(s[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add*s[pos].mul+s[pos].add)%mod;</span><br><span class="line">    </span><br><span class="line">    s[pos].add = <span class="number">0</span>;</span><br><span class="line">    s[pos].mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> l,<span class="type">int</span> r)</span><span class="comment">//建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[pos].l = l;</span><br><span class="line">    s[pos].r = r;</span><br><span class="line">    s[pos].mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        s[pos].sum = a[l]%mod;<span class="comment">//叶子节点的sum为自身的值</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(pos&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(pos);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MUL</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span><span class="comment">//区间乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=s[pos].l&amp;&amp;s[pos].r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        s[pos].add = (s[pos].add*k)%mod;</span><br><span class="line">        s[pos].mul = (s[pos].mul*k)%mod;</span><br><span class="line">        s[pos].sum = (s[pos].sum*k)%mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(pos);</span><br><span class="line">    <span class="type">int</span> mid = (s[pos].l+s[pos].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">MUL</span>(pos&lt;&lt;<span class="number">1</span>,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        <span class="built_in">MUL</span>(pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y,k);</span><br><span class="line">    <span class="built_in">update</span>(pos);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ADD</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span><span class="comment">//区间加法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=s[pos].l&amp;&amp;s[pos].r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        s[pos].add = (s[pos].add+k)%mod;</span><br><span class="line">        s[pos].sum = (s[pos].sum+k*(s[pos].r-s[pos].l<span class="number">+1</span>))%mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(pos);</span><br><span class="line">    <span class="type">int</span> mid = (s[pos].l+s[pos].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)<span class="built_in">ADD</span>(pos&lt;&lt;<span class="number">1</span>,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)<span class="built_in">ADD</span>(pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y,k);</span><br><span class="line">    <span class="built_in">update</span>(pos);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//区间查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(x&lt;=s[pos].l&amp;&amp;s[pos].r&lt;=y)</span><br><span class="line">         <span class="keyword">return</span> s[pos].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(pos);</span><br><span class="line">    ll va = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (s[pos].l+s[pos].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)</span><br><span class="line">        va = (va+<span class="built_in">ask</span>(pos&lt;&lt;<span class="number">1</span>,x,y))%mod;</span><br><span class="line">    <span class="keyword">if</span>(y &gt; mid)</span><br><span class="line">        va = (va+<span class="built_in">ask</span>(pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y))%mod;</span><br><span class="line">    <span class="keyword">return</span> va;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op,x,y;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">MUL</span>(<span class="number">1</span>,x,y,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            <span class="built_in">ADD</span>(<span class="number">1</span>,x,y,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">            cout&lt;&lt;<span class="built_in">ask</span>(<span class="number">1</span>,x,y)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;_;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="洛谷P4145"><a href="#洛谷P4145" class="headerlink" title="洛谷P4145"></a>洛谷P4145</h2><h3 id="树状数组-并查集"><a href="#树状数组-并查集" class="headerlink" title="树状数组&amp;并查集"></a>树状数组&amp;并查集</h3><p>在此题数据范围内，一个数开方6次就一定会变成1，1再开方结果不变，可以利用并查集跳过<br>并查集维护<br>-对于第 i 个数 $a[ i ]$,当 $a[ i ]$ 不等于 1 时，他的祖先是他自己,即 $f[ i ] &#x3D; i$,当 $a[ i ] &#x3D; 1$ 时，$f[ i ] &#x3D;$ 下一个不等于 1 的数的位置 $j (i &lt; j &lt;&#x3D;n+1)$,这里要注意$f[ n + 1 ] &#x3D; n + 1$.<br>-然后我们在$l$ ~ $r$ 区间内寻找祖先是自己的数修改即可，具体可用指针不断更新，$find$ 找祖先.<br>树状数组<br>-用于维护和询问前缀和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; P;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, dy[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line">ll a[MAXN&lt;&lt;<span class="number">2</span>];<span class="comment">//树状数组</span></span><br><span class="line">ll f[MAXN];<span class="comment">//并查集数组</span></span><br><span class="line">ll num[MAXN];<span class="comment">//原数组</span></span><br><span class="line"><span class="function">ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] += val;</span><br><span class="line">        i+= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x]==x?x:f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=a[x];</span><br><span class="line">        x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">        <span class="built_in">add</span>(i,num[i]);</span><br><span class="line">        f[i] = i;<span class="comment">//初始化并查集</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,l,r;</span><br><span class="line">        cin&gt;&gt;k&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t = (ll)<span class="built_in">sqrt</span>(num[l]);</span><br><span class="line">                <span class="built_in">add</span>(l,t-num[l]);<span class="comment">//从num[l]变成t也就是加上t-num[l]</span></span><br><span class="line">                num[l] = t;<span class="comment">//同步更新原数组</span></span><br><span class="line">                <span class="keyword">if</span>(num[l]&lt;= <span class="number">1</span>)<span class="comment">//当前数再开方也不会变了，跳过它</span></span><br><span class="line">                    f[l] = l + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    f[l] = l;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(f[l]==l)</span><br><span class="line">                    l = l<span class="number">+1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = <span class="built_in">find</span>(f[l]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(r)-<span class="built_in">query</span>(l<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><ul><li>维护数组maxx表示子树内的最大值，若最大值小于等于1，则跳过该子树，无需处理</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; P;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, dy[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line">ll sum[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll num[MAXN],maxx[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls node&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs node&lt;&lt;1|1</span></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>;ch = <span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch = <span class="built_in">getchar</span>())</span><br><span class="line">        x = x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> x*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    maxx[node] = <span class="built_in">max</span>(maxx[ls],maxx[rs]);</span><br><span class="line">    sum[node] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[node] = maxx[node] = num[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r&amp;&amp;l&gt;=L&amp;&amp;r&lt;=R)<span class="comment">//叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum[node] = maxx[node] = <span class="built_in">sqrt</span>(sum[node]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid&amp;&amp;maxx[ls]&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">change</span>(ls,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(mid &lt; R&amp;&amp;maxx[rs]&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">change</span>(rs,mid<span class="number">+1</span>,r,L,R);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;= l &amp;&amp; r&lt;=R)</span><br><span class="line">        <span class="keyword">return</span> sum[node];</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        ans+=<span class="built_in">query</span>(ls,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R)</span><br><span class="line">        ans+=<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span> sum);</span><br><span class="line">    <span class="built_in">memset</span>(maxx,<span class="number">0</span>,<span class="keyword">sizeof</span> maxx);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    ll m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll k = <span class="built_in">read</span>(),l = <span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习碎片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2025/07/22/2025_7_19/"/>
      <url>/2025/07/22/2025_7_19/</url>
      
        <content type="html"><![CDATA[<h2 id="这是test文章"><a href="#这是test文章" class="headerlink" title="这是test文章"></a>这是test文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
